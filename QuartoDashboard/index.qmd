---
title: "2023_DAIE_ICA_2_RB"
format: dashboard
server: shiny
---

```{r}
#| context: server-start

# See https://quarto.org/docs/interactive/shiny/execution.html#context-server-start

# In here we could add code (e.g., obtain a connection to a DB, read a CSV, download a ZIP from a remote source) that is run once and shared across multiple open sessions (i.e. multiple browser views of these pages that the user may open in Chrome/Edge)

```

```{r}
#| context: setup
library(RSQLite)
library(vistime)
library(plotly)

con <- dbConnect(drv=RSQLite::SQLite(), dbname="ICA_2023.sqlite")


projects <- dbGetQuery(con,'SELECT * FROM Projects;')
```

# Data View

```{r}
#| title: customers

# Create a table with the DT package 
datatable(head(customers))

```

```{r}
#| title: projects

datatable(head(projects))

```

```{r}
#| title: developers

datatable(head(developers))

```

```{r}
#| title: assets

datatable(head(assets))

```

# Plot View

<!--
Plot 1: 
Project timelines
Field 1: Start date
Field 2: End date
-->

```{r}
#| content: card-sidebar

# Note: I would've liked to use a dateRangeInput but at time of writing they're
# bugged and don't display correctly

dateInput(
  'projectsStartLimit',
  'Min. project start date',
  value = min(as.Date(projects$StartDate)),
  min = min(as.Date(projects$StartDate)),
  max = max(as.Date(projects$StartDate)),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  width = NULL,
  autoclose = TRUE,
  datesdisabled = NULL,
  daysofweekdisabled = NULL
)

dateInput(
  'projectsEndLimit',
  'Max. project end date',
  value = max(na.omit(as.Date(projects$EndDate))),
  min = min(na.omit(as.Date(projects$EndDate))),
  max = max(na.omit(as.Date(projects$EndDate))),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  width = NULL,
  autoclose = TRUE,
  datesdisabled = NULL,
  daysofweekdisabled = NULL
)

```

```{r}
#| title: Project timelines

plotlyOutput("projectTimelines")
```

```{r}
#| context: server

filtered_projects <- reactive({
  projects %>%
    filter(StartDate >= input$projectsStartLimit) %>%
    filter(EndDate <= input$projectsEndLimit)
})


timeline_data <- reactive({
  data.frame(event = filtered_projects()$ProjectName,
             start = as.Date(filtered_projects()$StartDate), 
             end   = as.Date(filtered_projects()$EndDate),
             group = "Projects")
})

output$projectTimelines <- renderPlotly({
  vistime(
    timeline_data(),
    optimize_y = FALSE
    )
})
```
