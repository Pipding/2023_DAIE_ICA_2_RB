---
title: "2023_DAIE_ICA_2_RB"
format: dashboard
server: shiny
theme:
  - custom.scss
---

```{r}
#| context: server-start

library(RSQLite)

# Open connection to database
con <- dbConnect(drv=RSQLite::SQLite(), dbname="ICA_2023.sqlite")

# Acquire some data used in visualizations
projects <- dbGetQuery(con,'SELECT * FROM Projects;')

customerCityBudgets <- dbGetQuery(con, '
SELECT
  CustomerName,
  CustomerCity AS City,
  CustomerCountry AS Country,
  Budget
FROM Customers Join Projects P on Customers.CustomerID = P.CustomerID')

```

```{r}
#| context: setup
library(vistime)
library(plotly)
library(europop)
library(fuzzyjoin)
library(stringdist)

# Load in data for use in rendering a map of the world & data about European cities
map.europe <- map_data("world")
df.euro_cities <- city_coords

# Create a dataframe for per-city budget
# Need to use fuzzy join because Rome is called Roma in the city_coords dataset
df.geo_budget <- fuzzy_left_join(
  customerCityBudgets,
  df.euro_cities,
  by = c("City" = "city"),
  match_fun = list(function(x,y) stringdist(tolower(x),tolower(y)) < 2) # stringdist < 2 means words will match if less than 2 changes are needed to get from word x to word y. e.g. "car" would match "cat" because only 1 letter needs to change but "dog" would not match "bag" because that requires 2 changed letters
)

# The above fuzzy join results in duplicate columns, so we drop one
df.geo_budget <- subset(df.geo_budget, select = -c(city) )

# Theme for use in the map view. Adapted from the example on https://www.r-bloggers.com/2017/08/tidyverse-practice-mapping-large-european-cities/
theme.maptheme <-
  theme(text = element_text(family = "Gill Sans", color = "#444444")) +
  theme(panel.grid = element_blank()) +
  theme(axis.text = element_blank()) +
  theme(axis.ticks = element_blank()) +
  theme(axis.title = element_blank()) +
  theme(legend.background = element_blank()) +
  theme(legend.key = element_blank()) +
  theme(legend.title = element_text(size = 18)) +
  theme(legend.text = element_text(size = 10)) +
  theme(panel.background = element_rect(fill = "#596673")) +
  theme(panel.grid = element_blank())

# Create a dataframe to hold information about project timelines
df.timeline_data <- data.frame(event = projects$ProjectName,
                               start = as.Date(projects$StartDate), 
                               end   = as.Date(projects$EndDate),
                               group = "Projects")
```

# Data View

```{r}
#| title: customers

datatable(head(customers))
```

```{r}
#| title: projects

datatable(head(projects))
```

```{r}
#| title: developers

datatable(head(developers))
```

```{r}
#| title: assets

datatable(head(assets))
```

# Project Timelines

<!--
Plot 1: 
Project timelines
Field 1: Start date range
Field 2: End date range
-->

```{r Date range inputs for project timelines plot}
#| content: card-sidebar

# Input for the range of project start dates. Projects with start dates outside 
# this range are not displayed
dateRangeInput(
  'timeline_start_date_input',
  'Project start date range',
  start = min(projects$StartDate),
  end = max(projects$StartDate),
  min = min(projects$StartDate),
  max = max(projects$StartDate),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  separator = " to "
)

# Input for the range of project end dates. Projects with end dates outside 
# this range are not displayed
dateRangeInput(
  'timeline_end_date_input',
  'Project end date range',
  start = min(projects$EndDate),
  end = max(projects$EndDate),
  min = min(projects$EndDate),
  max = max(projects$EndDate),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  separator = " to "
)
```

```{r Plot project timelines}
#| title: Project timelines

plotlyOutput("projectTimelines")
```

# Geographic spend

<!--
Plot 2: 
Spend per country/city
Field 1: Countries
Field 2: Min & max budget
-->

```{r Inputs for the geographic spend map}
#| content: card-sidebar

# Input which determines which countries to display data for
checkboxGroupInput(
  "map_country_input",
  "Countries",
  choices = sort(unique(df.geo_budget$Country)),
  selected = sort(unique(df.geo_budget$Country))[c(FALSE, TRUE)], # For demo purposes, select every other checkbox by default. Found this trick here https://stackoverflow.com/a/13462110
  inline = FALSE,
  width = '100%'
)

# Input for controlling what range of project budgets should be displayed
sliderInput(
  "map_budget_input",
  "Budget range",
  value = c(min(df.geo_budget$Budget), max(df.geo_budget$Budget)),
  min = min(df.geo_budget$Budget),
  max = max(df.geo_budget$Budget)
)

```

```{r Total project spend mapped by customer city}
#| title: Total project budget by location

plotlyOutput("geoData")
```



```{r}
#| context: server

##################################################
# Timeline view
##################################################

# Filter by project start & end date
df.timeline_data_react <- reactive({
  df.timeline_data %>%
    filter(start >= input$timeline_start_date_input[1]) %>%
    filter(start <= input$timeline_start_date_input[2]) %>%
    filter(end >= input$timeline_end_date_input[1]) %>%
    filter(end <= input$timeline_end_date_input[2])
})

# Render the timeline
output$projectTimelines <- renderPlotly({
  vistime(
    df.timeline_data_react(),
    optimize_y = FALSE
  )
})

##################################################
# Map view
##################################################

# Filter by country
df.geo_budget_react <- reactive({
  df.geo_budget %>%
    filter(Country %in% input$map_country_input) %>%
    filter(Budget >= input$map_budget_input[1]) %>%
    filter(Budget <= input$map_budget_input[2])
})

# Render the map & budget data
output$geoData <- renderPlotly({
  # Based on https://www.r-bloggers.com/2017/08/tidyverse-practice-mapping-large-european-cities/
  ggplot() +
    geom_polygon(
      data = map.europe,
      aes(x = long, y = lat, group = group, text = " "),
      fill = "#DEDEDE",
      colour = "#818181",
      linewidth = .15
    ) +
    geom_point(
      data = df.geo_budget_react(),
      aes(x = lon, y = lat, name = City, size = Budget),
      color = "red",
      alpha = .6
    ) +
    coord_cartesian(xlim = c(-30,50), ylim = c(32,70)) +
    theme.maptheme
})
```
