---
title: "2023_DAIE_ICA_2_RB"
format: dashboard
server: shiny
theme:
  - custom.scss
---

```{r}
#| context: server-start

# See https://quarto.org/docs/interactive/shiny/execution.html#context-server-start

# In here we could add code (e.g., obtain a connection to a DB, read a CSV, download a ZIP from a remote source) that is run once and shared across multiple open sessions (i.e. multiple browser views of these pages that the user may open in Chrome/Edge)

```

```{r}
#| context: setup
library(RSQLite)
library(vistime)
library(plotly)

con <- dbConnect(drv=RSQLite::SQLite(), dbname="ICA_2023.sqlite")


projects <- dbGetQuery(con,'SELECT * FROM Projects;')
```

# Data View

```{r}
#| title: customers

# Create a table with the DT package 
datatable(head(customers))

```

```{r}
#| title: projects

datatable(head(projects))

```

```{r}
#| title: developers

datatable(head(developers))

```

```{r}
#| title: assets

datatable(head(assets))

```

# Plot View

<!--
Plot 1: 
Project timelines
Field 1: Start date
Field 2: End date
-->

```{r Date range inputs for project timelines plot}
#| content: card-sidebar

# These dateRangeInputs control the 
dateRangeInput(
  'projectStartRange',
  'Project start date range',
  start = min(projects$StartDate),
  end = max(projects$StartDate),
  min = min(projects$StartDate),
  max = max(projects$StartDate),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  separator = " to "
)

dateRangeInput(
  'projectEndRange',
  'Project end date range',
  start = min(projects$EndDate),
  end = max(projects$EndDate),
  min = min(projects$EndDate),
  max = max(projects$EndDate),
  format = "yyyy-mm-dd",
  startview = "month",
  weekstart = 0,
  language = "en",
  separator = " to "
)

```

```{r Plot project timelines}
#| title: Project timelines

plotlyOutput("projectTimelines")
```




```{r}
#| context: server

##################################################
# Timeline view
##################################################
timelineFilteredProjects <- reactive({
  projects %>%
    filter(StartDate >= input$projectStartRange[1]) %>%
    filter(StartDate <= input$projectStartRange[2]) %>%
    filter(EndDate >= input$projectEndRange[1]) %>%
    filter(EndDate <= input$projectEndRange[2])
})


timelineData <- reactive({
  data.frame(event = timelineFilteredProjects()$ProjectName,
             start = as.Date(timelineFilteredProjects()$StartDate), 
             end   = as.Date(timelineFilteredProjects()$EndDate),
             group = "Projects")
})

output$projectTimelines <- renderPlotly({
  vistime(
    timelineData(),
    optimize_y = FALSE
    )
})

##################################################
# Budget view
##################################################
```
